---
import { Image } from "astro:assets";
import { sponsors } from "../data/sponsors";
import logto from "../images/logto.webp";
import hetzner from "../images/hetzner.jpg";
import quant from "../images/quant.svg";
import arcjet from "../images/arcjet.svg";
import bc from "../images/bc.png";
import supaguide from "../images/supaguide.png";
import tigris from "../images/tigris.svg";
import goldenvm from "../images/goldenvm.png";
import trieve from "../images/trieve_bg.png";
import blacksmith from "../images/blacksmith.svg";
import jobscollider from "../images/jobscollider.svg";
import hostinger from "../images/hostinger.svg";
import glueops from "../images/glueops.webp";
import ubicloud from "../images/ubicloud.svg";
import juxtdigital from "../images/juxtdigital.png";
import massivegrid from "../images/massivegrid.svg";
import americancloud from "../images/americancloud.svg";
import algora from "../images/algora.svg";
import liquid from "../images/liquid.svg";
import tolgee from "../images/tolgee.svg";
import syntax from "../images/syntax.svg";
import pfglabs from "../images/pfglabs.svg";
import cloudify from "../images/cloudify.svg";
import comit from "../images/comit-color.svg";
import stream from "../images/stream.svg";
import convex from "../images/convex.svg";
import coderabbit from "../images/coderabbit.svg";
import compai from "../images/compai.svg";

const ref = "coolify.io";

// Create a mapping of imageKey to imported image
const images = {
  logto,
  hetzner,
  quant,
  arcjet,
  bc,
  supaguide,
  tigris,
  goldenvm,
  trieve,
  blacksmith,
  jobscollider,
  hostinger,
  glueops,
  ubicloud,
  juxtdigital,
  massivegrid,
  americancloud,
  algora,
  liquid,
  tolgee,
  syntax,
  pfglabs,
  cloudify,
  comit,
  stream,
  convex,
  coderabbit,
  compai,
};

// Update URLs with ref parameter
const sponsorsWithRef = sponsors.map((sponsor) => ({
  ...sponsor,
  url: sponsor.url.includes("?")
    ? `${sponsor.url}&ref=${ref}&utm_source=${ref}`
    : `${sponsor.url}?ref=${ref}&utm_source=${ref}`,
}));
---

<style>
  .description-container {
    height: 0;
    overflow: hidden;
    transition: height 0.3s ease-out;
    background: rgba(23, 23, 23, 0.9);
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 50;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    padding: 0 2rem;
  }

  .description-container.active {
    height: 120px;
  }

  .sponsors-grid {
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    max-width: 1400px;
    margin: 0 auto;
  }

  .sponsor-item {
    transition: all 0.2s ease;
    position: relative;
    aspect-ratio: 16/9;
    display: flex;
    align-items: center;
    justify-content: center;
    max-width: 200px;
    margin: 0 auto;
  }

  /* Base rules for all sponsor images */
  .sponsor-item img {
    width: auto;
    height: auto;
    object-fit: contain;
    min-width: 60px;
    min-height: 50px;
    max-width: 160px;
    max-height: 80px;
    transition: transform 0.2s ease;
  }

  /* SVG-specific rules */
  .sponsor-item img[src*="cloudify.svg"] {
    max-width: 160px;
    max-height: 80px;
    min-height: 80px;
  }

  .sponsor-item img[src*="syntax.svg"] {
    max-width: 190px;
    max-height: 120px;
    min-height: 80px;
  }

  /* Other larger SVG logos */
  .sponsor-item img[src*="arcjet.svg"],
  .sponsor-item img[src*="algora.svg"],
  .sponsor-item img[src*="liquid.svg"],
  .sponsor-item img[src*="massivegrid.svg"] {
    max-width: 190px;
    max-height: 120px;
    min-height: 80px;
  }

  /* Smaller SVG logos */
  .sponsor-item img[src*="pfglabs.svg"] {
    min-width: 10px;
    min-height: 35px;
    max-width: 100px;
    max-height: 35px;
  }

  .sponsor-item img[src*="tigris.svg"],
  .sponsor-item img[src*="tolgee.svg"],
  .sponsor-item img[src*="hostinger.svg"],
  .sponsor-item img[src*="ubicloud.svg"],
  .sponsor-item img[src*="blacksmith.svg"],
  .sponsor-item img[src*="jobscollider.svg"],
  .sponsor-item img[src*="americancloud.svg"] {
    max-width: 160px;
    max-height: 50px;
    min-height: 50px;
  }

  .sponsors-grid:hover .sponsor-item:not(:hover) {
    opacity: 0.3;
    transform: scale(0.95);
  }

  .sponsor-item:hover {
    transform: scale(1.1);
    z-index: 1;
  }

  @media (max-width: 1024px) {
    .sponsors-grid {
      grid-template-columns: repeat(3, 1fr);
    }
  }

  @media (max-width: 640px) {
    .sponsors-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  @media (max-width: 480px) {
    .sponsors-grid {
      grid-template-columns: repeat(1, 1fr);
    }
  }
</style>

<div id="description" class="description-container">
  <p class="text-white text-xl"></p>
</div>

<hr class="mb-2 border-coolgray-200" />
<div class="sponsors-grid">
  {
    sponsorsWithRef.map((sponsor) => (
      <a
        class={`${
          sponsor.isSpecial
            ? "hover:bg-coolgray-200 p-4 rounded flex justify-center flex-col items-center rainbow-border text-white font-bold text-xl col-span-1"
            : `sponsor-item hover:bg-coolgray-200 rounded ${sponsor.customStyle || "p-4"}`
        }`}
        href={sponsor.url}
        data-description={sponsor.description}
      >
        {sponsor.isSpecial ? (
          <span class="bg-base-100 w-full h-full flex justify-center items-center">
            {sponsor.name}
          </span>
        ) : sponsor.isPublicImage ? (
          <img
            src={sponsor.imageKey}
            width={sponsor.width || 180}
            height={sponsor.height || 180}
            loading="eager"
            alt={sponsor.description}
            class="rounded"
          />
        ) : (
          <Image
            src={images[sponsor.imageKey]}
            width={sponsor.width || 180}
            height={sponsor.height || 180}
            loading="eager"
            alt={sponsor.description}
            class="rounded"
          />
        )}
        {sponsor.additionalContent && (
          <Fragment set:html={sponsor.additionalContent} />
        )}
      </a>
    ))
  }
</div>
<hr class="mb-2 border-coolgray-200" />

<script>
  const sponsors = document.querySelectorAll(".sponsor-item");
  const descriptionContainer = document.getElementById("description");
  const descriptionText = descriptionContainer.querySelector("p");

  sponsors.forEach((sponsor) => {
    sponsor.addEventListener("mouseenter", () => {
      const description = sponsor.getAttribute("data-description");
      if (description) {
        descriptionText.textContent = description;
        descriptionContainer.classList.add("active");
      }
    });

    sponsor.addEventListener("mouseleave", () => {
      descriptionContainer.classList.remove("active");
    });
  });
</script>

<style>
  .rainbow-border {
    position: relative;
    border-radius: 6px;
    padding: 0.2rem;
    background: linear-gradient(
      124deg,
      #ff2400,
      #e81d1d,
      #e8b71d,
      #e3e81d,
      #1de840,
      #1ddde8,
      #2b1de8,
      #dd00f3,
      #dd00f3
    );
    background-size: 200% 100%;
    animation: rainbow 2s ease infinite;
  }
  @keyframes rotate {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }
  @keyframes rainbow {
    0% {
      background-position: 0% 82%;
    }
    50% {
      background-position: 100% 19%;
    }
    100% {
      background-position: 0% 82%;
    }
  }
</style>
